<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-05-17T16:05:39-04:00</updated><id>/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Yet another post about design vs. art</title><link href="/2015/07/22/yet-another-post-about-design-vs-art.html" rel="alternate" type="text/html" title="Yet another post about design vs. art" /><published>2015-07-22T00:00:00-04:00</published><updated>2015-07-22T00:00:00-04:00</updated><id>/2015/07/22/yet-another-post-about-design-vs-art</id><content type="html" xml:base="/2015/07/22/yet-another-post-about-design-vs-art.html">&lt;p&gt;This is my take on the difference between design and art. There are many like it, but this one is mine.&lt;/p&gt;

&lt;p&gt;There are hundreds, if not thousands, of think pieces out there about what is design, and what is art, and how they overlap (or don’t). Can art exist without design? Can design exist without art? Is graphic design art or is it design? Does art have a role in UX design?&lt;/p&gt;

&lt;p&gt;The world hardly needs another article on this topic, but I feel like if I’m going to have a blog about design, I should make it clear what my stance is here.&lt;/p&gt;

&lt;p&gt;First up: Design.&lt;/p&gt;

&lt;h2 id=&quot;design-is-the-reduction-of-friction&quot;&gt;Design is the reduction of friction&lt;/h2&gt;

&lt;p&gt;This is another way of saying that design is about removing all the things that make something not work as well as it could. In user experience design this means making something easy to use by removing everything that makes it difficult to use. There are millions of articles out there about how this works, but design isn’t just about usability. There are other kinds of friction that can be eliminated with creative design — including literal friction.&lt;/p&gt;

&lt;p&gt;I recently bought a Nissan LEAF electric car. As you can see in the picture below, it has a couple of really funky looking raised headlights.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;Nissan Leaf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Those funky headlights aren’t purely stylistic. They’re designed to reduce drag over the side mirrors. Both mileage and safety are important to car manufacturers. Since side mirrors can’t be eliminated or made perfectly aerodynamic, a creative designer found a way to use a completely different car part to mitigate one negative impact of their presence.&lt;/p&gt;

&lt;p&gt;Design can also be used to reduce friction in marketing. In marketing, friction is anything that prevents a user from selecting your product over a competitor’s. A marketer’s goal is to make the decision to use their product as close to a “no-brainer” as possible.&lt;/p&gt;

&lt;p&gt;If I’m considering two different restaurants and one offers online reservations and one doesn’t, I’m almost always going to choose the one with online reservations. This may not truly be “in my best interest” (maybe the food at the other place is better), but I absolutely hate feeling like an idiot when I call for a reservation just to find out they’re booked for weeks. That’s friction a restaurant needs to remove if they want to do business with me.&lt;/p&gt;

&lt;p&gt;What about Graphic Design? Is Graphic Design… design? Or is it art? That’s where the art vs. design debate tends to get pretty heated. My take is that it’s a little bit of both, but it’s mostly art. So let’s define art:&lt;/p&gt;

&lt;h2 id=&quot;art-is-the-use-of-craft-to-tell-a-story&quot;&gt;Art is the use of craft to tell a story&lt;/h2&gt;

&lt;p&gt;Entire college courses and entire careers are dedicated to defining art, but in actuality most discussion centers around what makes art good or bad. I am not qualified to have those discussions. I stick with a definition that makes no judgments about quality.&lt;/p&gt;

&lt;p&gt;All art is story telling. An artist wants to make you feel or think something, so they tell a story they hope will get that reaction. It doesn’t have to be a literal story. It can be a mood created by clever use of typography or colors (or interpretive dance, or music, or architecture). It can be a feeling of wealth and success created by selecting exotic materials for a luxury car.&lt;/p&gt;

&lt;p&gt;Design always solves problems. Art doesn’t have to. Sometimes art’s only goal is to make someone think “Wow, that’s weird.” If art gives the viewer/listener/reader the thoughts or feelings the artist intends them to have, then it’s successful. Design is about the goals of the user. Art is about the goals of the creator.&lt;/p&gt;

&lt;h2 id=&quot;how-design-helps-art&quot;&gt;How design helps art&lt;/h2&gt;

&lt;p&gt;Artists use design to create art. If art’s goal is to tell a story, the job of design in art is to reduce the friction in getting that story across. The most common design tool in art is technical skill. If you want people to understand the story of Swan Lake, you need to be able to dance. If you want to tell a visual story about the passion of Jesus Christ, it helps to be able to draw an accurate representation of Jesus (or at least of a human being).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;Ecce Homo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But art can also make use of clever design decisions unrelated to technical skill. Mark Rothko is famous for extremely simple (looking) paintings containing nothing but large fields of color. There’s little story that this type of painting can tell beyond setting a mood.&lt;/p&gt;

&lt;p&gt;Rothko’s paintings are large. If a painting’s goal is to set a mood, it’s much easier to set a mood with a huge wall of color than with a postage stamp. The size of his paintings was a design choice made by Rothko with the goal of reducing friction in setting a mood.&lt;/p&gt;

&lt;h2 id=&quot;how-art-helps-design&quot;&gt;How art helps design&lt;/h2&gt;

&lt;p&gt;It’s almost impossible to create a successful experience that doesn’t tell a story. Human beings are not rational creatures. Science has proven repeatedly that human decisions are driven by emotion, not logic—even to the extent that people with damaged emotional centers in their brains are incapable of making decisions. People are influenced by stories.&lt;/p&gt;

&lt;p&gt;Particularly in the consumer world, stories drive purchasing decisions. When you buy a Ralph Lauren polo shirt, you aren’t buying cotton and thread, you’re buying sunny afternoons playing croquet at the country club. When you buy a Lexus, you’re not buying four wheels and a engine, you’re buying a corner office, power lunches, and a killer golf swing. These stories help marketers sell products. If these stories speak to you, they reduce the friction that would cause you to buy something else. When it comes to selling products, these stories are just as important as good UX design on the respective companies’ websites.&lt;/p&gt;

&lt;p&gt;I recently came across a Medium post entitled “Well-designed interfaces are boring.” I respectfully disagree. Firstly, Donald Norman famously demonstrated that attractive things work better. Why? Because we feel more relaxed around visually appealing things. This state of relaxation encourages us to explore alternative ways of using something, whereas a state of tension causes us to give up in frustration.&lt;/p&gt;

&lt;p&gt;Secondly, the primary example author Matthew Ström gives as a boring interface is the Bloomberg Terminal. You know, one of these things:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;Bloomberg Terminal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;He’s right that every design aspect of this thing was chosen for a good reason but — I’m sorry — this thing is not boring. Sitting in front of this terminal would make me feel like I’m an all-powerful wizard controlling the universe! That’s a hell of a story that’s going to affect the way I think and act. Based on the reputation of elite Wall Street bankers, I’m pretty sure that’s the desired (and proven) effect.&lt;/p&gt;

&lt;p&gt;Good design does not need to be boring. Good design should not be distracting, but that’s absolutely not the same thing.&lt;/p&gt;

&lt;h2 id=&quot;lets-talk-flat-design-of-course&quot;&gt;Lets talk flat design (of course)&lt;/h2&gt;

&lt;p&gt;Nothing has fired up the art vs. design debate more than the twenty-first century “übertrend” of flat design. Is flat design devoid of art? Is flat design devoid of design? Either way, are we better or worse off?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;Photo of iOS 6 vs. iOS 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, let’s see how flat design fits into my two definitions of design and art.&lt;/p&gt;

&lt;p&gt;Proponents of flat design believe that it removes friction by eliminating distracting UI details. But detractors believe that it adds friction by making it harder to decipher content hierarchies. I believe that both flat and non-flat design can have non-distracting UI’s and clear content hierarchies if done well. So, I don’t find either style inherently superior — from a UX perspective — but there is clearly a design strategy behind each.&lt;/p&gt;

&lt;p&gt;The other argument flat design fans make is that flat design is somehow more “natural” for a screen-based interface, that it’s somehow more authentic and real.&lt;/p&gt;

&lt;p&gt;If that’s not storytelling, I don’t know what is. There’s no such thing as an “authentic digital experience”. Humans invented computers and they invented display screens. Saying that there’s one “authentic” look and feel for screens is like saying there’s only one “authentic” way to build a table. Like screens, tables don’t exist in nature. Tables can be made of wood, plastic, metal, glass, or iron. There is room in the world for all of these, and the ideal table at any given moment depends on intended usage and fashion trends.&lt;/p&gt;

&lt;p&gt;Flat design is absolutely an artistic choice and by no means some kind of platonic ideal of visual design.&lt;/p&gt;

&lt;p&gt;I believe we exist in an endless cycle of flat vs. intricate design. Some believe intricate-to-flat is a one way street. If so, how did we go from Swiss design to grunge, then back to flat design? Intricate design will be back. There is far too much craft and elegance in graphics like 2010-era OS X icons for their likes never to grace our eyes again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/path/to/img.jpg&quot; alt=&quot;Mac Icons 2010&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cant-we-all-just-get-along&quot;&gt;Can’t we all just get along?&lt;/h2&gt;

&lt;p&gt;There is room in the tech world for art and design. There is room for designers who are good at art and for artists who are good at design. There is also room for designers who aren’t good at art and artists who aren’t good at design — as long as they collaborate well with their counterparts. Art and design are both tools. They’re independent yet highly symbiotic. If you want to build something great, strive to make use of the best design and the best art available.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is my take on the difference between design and art. There are many like it, but this one is mine. There are hundreds, if not thousands, of think pieces out there about what is design, and what is art, and how they overlap (or don’t). Can art exist without design? Can design exist without art? Is graphic design art or is it design? Does art have a role in UX design? The world hardly needs another article on this topic, but I feel like if I’m going to have a blog about design, I should make it clear what my stance is here. First up: Design. Design is the reduction of friction This is another way of saying that design is about removing all the things that make something not work as well as it could. In user experience design this means making something easy to use by removing everything that makes it difficult to use. There are millions of articles out there about how this works, but design isn’t just about usability. There are other kinds of friction that can be eliminated with creative design — including literal friction. I recently bought a Nissan LEAF electric car. As you can see in the picture below, it has a couple of really funky looking raised headlights. Those funky headlights aren’t purely stylistic. They’re designed to reduce drag over the side mirrors. Both mileage and safety are important to car manufacturers. Since side mirrors can’t be eliminated or made perfectly aerodynamic, a creative designer found a way to use a completely different car part to mitigate one negative impact of their presence. Design can also be used to reduce friction in marketing. In marketing, friction is anything that prevents a user from selecting your product over a competitor’s. A marketer’s goal is to make the decision to use their product as close to a “no-brainer” as possible. If I’m considering two different restaurants and one offers online reservations and one doesn’t, I’m almost always going to choose the one with online reservations. This may not truly be “in my best interest” (maybe the food at the other place is better), but I absolutely hate feeling like an idiot when I call for a reservation just to find out they’re booked for weeks. That’s friction a restaurant needs to remove if they want to do business with me. What about Graphic Design? Is Graphic Design… design? Or is it art? That’s where the art vs. design debate tends to get pretty heated. My take is that it’s a little bit of both, but it’s mostly art. So let’s define art: Art is the use of craft to tell a story Entire college courses and entire careers are dedicated to defining art, but in actuality most discussion centers around what makes art good or bad. I am not qualified to have those discussions. I stick with a definition that makes no judgments about quality. All art is story telling. An artist wants to make you feel or think something, so they tell a story they hope will get that reaction. It doesn’t have to be a literal story. It can be a mood created by clever use of typography or colors (or interpretive dance, or music, or architecture). It can be a feeling of wealth and success created by selecting exotic materials for a luxury car. Design always solves problems. Art doesn’t have to. Sometimes art’s only goal is to make someone think “Wow, that’s weird.” If art gives the viewer/listener/reader the thoughts or feelings the artist intends them to have, then it’s successful. Design is about the goals of the user. Art is about the goals of the creator. How design helps art Artists use design to create art. If art’s goal is to tell a story, the job of design in art is to reduce the friction in getting that story across. The most common design tool in art is technical skill. If you want people to understand the story of Swan Lake, you need to be able to dance. If you want to tell a visual story about the passion of Jesus Christ, it helps to be able to draw an accurate representation of Jesus (or at least of a human being). But art can also make use of clever design decisions unrelated to technical skill. Mark Rothko is famous for extremely simple (looking) paintings containing nothing but large fields of color. There’s little story that this type of painting can tell beyond setting a mood. Rothko’s paintings are large. If a painting’s goal is to set a mood, it’s much easier to set a mood with a huge wall of color than with a postage stamp. The size of his paintings was a design choice made by Rothko with the goal of reducing friction in setting a mood. How art helps design It’s almost impossible to create a successful experience that doesn’t tell a story. Human beings are not rational creatures. Science has proven repeatedly that human decisions are driven by emotion, not logic—even to the extent that people with damaged emotional centers in their brains are incapable of making decisions. People are influenced by stories. Particularly in the consumer world, stories drive purchasing decisions. When you buy a Ralph Lauren polo shirt, you aren’t buying cotton and thread, you’re buying sunny afternoons playing croquet at the country club. When you buy a Lexus, you’re not buying four wheels and a engine, you’re buying a corner office, power lunches, and a killer golf swing. These stories help marketers sell products. If these stories speak to you, they reduce the friction that would cause you to buy something else. When it comes to selling products, these stories are just as important as good UX design on the respective companies’ websites. I recently came across a Medium post entitled “Well-designed interfaces are boring.” I respectfully disagree. Firstly, Donald Norman famously demonstrated that attractive things work better. Why? Because we feel more relaxed around visually appealing things. This state of relaxation encourages us to explore alternative ways of using something, whereas a state of tension causes us to give up in frustration. Secondly, the primary example author Matthew Ström gives as a boring interface is the Bloomberg Terminal. You know, one of these things: He’s right that every design aspect of this thing was chosen for a good reason but — I’m sorry — this thing is not boring. Sitting in front of this terminal would make me feel like I’m an all-powerful wizard controlling the universe! That’s a hell of a story that’s going to affect the way I think and act. Based on the reputation of elite Wall Street bankers, I’m pretty sure that’s the desired (and proven) effect. Good design does not need to be boring. Good design should not be distracting, but that’s absolutely not the same thing. Lets talk flat design (of course) Nothing has fired up the art vs. design debate more than the twenty-first century “übertrend” of flat design. Is flat design devoid of art? Is flat design devoid of design? Either way, are we better or worse off? Well, let’s see how flat design fits into my two definitions of design and art. Proponents of flat design believe that it removes friction by eliminating distracting UI details. But detractors believe that it adds friction by making it harder to decipher content hierarchies. I believe that both flat and non-flat design can have non-distracting UI’s and clear content hierarchies if done well. So, I don’t find either style inherently superior — from a UX perspective — but there is clearly a design strategy behind each. The other argument flat design fans make is that flat design is somehow more “natural” for a screen-based interface, that it’s somehow more authentic and real. If that’s not storytelling, I don’t know what is. There’s no such thing as an “authentic digital experience”. Humans invented computers and they invented display screens. Saying that there’s one “authentic” look and feel for screens is like saying there’s only one “authentic” way to build a table. Like screens, tables don’t exist in nature. Tables can be made of wood, plastic, metal, glass, or iron. There is room in the world for all of these, and the ideal table at any given moment depends on intended usage and fashion trends. Flat design is absolutely an artistic choice and by no means some kind of platonic ideal of visual design. I believe we exist in an endless cycle of flat vs. intricate design. Some believe intricate-to-flat is a one way street. If so, how did we go from Swiss design to grunge, then back to flat design? Intricate design will be back. There is far too much craft and elegance in graphics like 2010-era OS X icons for their likes never to grace our eyes again. Can’t we all just get along? There is room in the tech world for art and design. There is room for designers who are good at art and for artists who are good at design. There is also room for designers who aren’t good at art and artists who aren’t good at design — as long as they collaborate well with their counterparts. Art and design are both tools. They’re independent yet highly symbiotic. If you want to build something great, strive to make use of the best design and the best art available.</summary></entry><entry><title type="html">You are a UX designer. You are a hero.</title><link href="/2015/07/15/you-are-a-ux-designer-hero.html" rel="alternate" type="text/html" title="You are a UX designer. You are a hero." /><published>2015-07-15T16:56:11-04:00</published><updated>2015-07-15T16:56:11-04:00</updated><id>/2015/07/15/you-are-a-ux-designer-hero</id><content type="html" xml:base="/2015/07/15/you-are-a-ux-designer-hero.html">&lt;p&gt;Ask me why I love being a user experience designer, and I’ll tell you it’s because I enjoy being a hero who saves lives. No, I don’t work in medicine or on devices used by first responders. Right now, I mostly work on a website that helps people read reports online.&lt;/p&gt;

&lt;p&gt;But I’m still saving lives. Allow me to explain.&lt;/p&gt;

&lt;p&gt;When I was a software engineer in my 20’s, I had a “quarter life crisis”. I questioned the impact of my work on the universe. I enjoyed programming, but I felt like what I was doing was in no way noble, and certainly not heroic.&lt;/p&gt;

&lt;p&gt;In my first job, I did QA testing on software used in industrial automation equipment. So, I was testing software written by other people that went into hardware that went into a factory that made the plastic lining that goes into paper sugar packets. (Did you even realize that was a thing someone had to manufacture?).&lt;/p&gt;

&lt;p&gt;Most real world tech jobs are like that — far removed from directly helping out humanity in any profound way.&lt;/p&gt;

&lt;p&gt;I wasn’t saving lives, or curing cancer, or ending world hunger. I was just using technology to grease gears in the innermost bowels of the gigantic machine of capitalism. I certainly was not, as Steve Jobs would say, “putting a ding in the universe”.&lt;/p&gt;

&lt;p&gt;Despite having no spare time or money, I looked into what it would take to do a massive career pivot and become an optometrist. Why an optometrist? Well, preserving the gift of sight was clearly heroic and noble. And as far as the medical professions went, it was one of the least icky specialities.&lt;/p&gt;

&lt;p&gt;Eventually, common sense got the better of me and I stuck with my tech career. I focused on working at companies that endeavored to make peoples’ lives legitimately better in some way. My first long-term job was at Groove Networks. Groove genuinely wanted to revolutionize the way humans communicated across time and space.&lt;/p&gt;

&lt;p&gt;But I still felt like I, personally, was just greasing gears – not changing lives. (Ultimately, Groove didn’t really change many lives either. Microsoft acquired Groove, along with founder Ray Ozzie, and stripped it for parts that live on as bits of other software.)&lt;/p&gt;

&lt;p&gt;I eventually gravitated from engineering into user experience design. UX design allowed me to focus on the parts of software development that I loved while avoiding the parts I didn’t. Ultimately, though, I was still working on the same type of end product. It felt good to make things easier for people, but I was making it easier to do things that weren’t really that important, in the grand scheme of things.&lt;/p&gt;

&lt;p&gt;In 2012 I came across a speech by Paul Ford called “&lt;a href=&quot;http://contentsmagazine.com/articles/10-timeframes/&quot;&gt;10 Timeframes&lt;/a&gt;”. It was a keynote speech given to a graduating class of interaction designers. I welcome you to read it before continuing with this post. It’s one of the best things I’ve ever read — period. It put my work into a completely new perspective. The line that stopped me dead in my tracks was this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The only unit of time that matters is heartbeats.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every “user”, no matter the tool or system, is a living, breathing human being. One with hopes, dreams, plans, fears, passions… and a beating heart. As UX designers, we are in the business of giving people their heartbeats back.&lt;/p&gt;

&lt;p&gt;Every second someone is not struggling with a piece of software is a second their mind can be free to hope, dream, and plan. Every heartbeat not spent focusing on making something work is one spent on something that really matters. And those heartbeats add up.&lt;/p&gt;

&lt;p&gt;The average human lifespan is about 70 years, or about 3 billion heartbeats. Let’s say you design software used by 2,000 users. And let’s say your design skills save each of those users 10 minutes a day they would otherwise spend struggling with software. In 8 years, you will have given over two billion seconds back to humanity that would otherwise be wasted. You will have saved an entire human lifetime.&lt;/p&gt;

&lt;p&gt;In a 55 year career, you will reclaim about a dozen human lifetimes that would not have otherwise existed.&lt;/p&gt;

&lt;p&gt;If you do the same work on software with 30,000 users, you will save over 100 lifetimes in your career. And if you work for Facebook, with over a billion users? Well, if you save each of those users a mere 2 seconds a day for 55 years, you will save over 13,000 lives.&lt;/p&gt;

&lt;p&gt;These lives — created from thin air by nothing but your skills and passion — are entire lifetimes spent dreaming about the future, making plans with loved ones, and exploring passions that extend far beyond whatever tool you are working on.&lt;/p&gt;

&lt;p&gt;If you’re a UX designer and ever feel like the things you’re working on don’t really matter, remember this: it’s not the tools you create that give your work profound meaning. It’s the little spaces in time you create when people don’t have to think about those tools. Those little spaces save lives. You save lives. You are a hero.&lt;/p&gt;</content><author><name></name></author><summary type="html">Ask me why I love being a user experience designer, and I’ll tell you it’s because I enjoy being a hero who saves lives. No, I don’t work in medicine or on devices used by first responders. Right now, I mostly work on a website that helps people read reports online.</summary></entry><entry><title type="html">In defense of the UX specialist</title><link href="/2015/05/17/in-defense-of-the-ux-specialist.html" rel="alternate" type="text/html" title="In defense of the UX specialist" /><published>2015-05-17T16:56:11-04:00</published><updated>2015-05-17T16:56:11-04:00</updated><id>/2015/05/17/in-defense-of-the-ux-specialist</id><content type="html" xml:base="/2015/05/17/in-defense-of-the-ux-specialist.html">&lt;p&gt;I was recently pilloried on Twitter by a Well-Respected UX Personality for asserting that there is a place on development teams for user experience specialists.&lt;/p&gt;

&lt;p&gt;In a particularly ugly bit of this exchange, I was even accused of not understanding basic logic, because while I agreed with him that specialists aren’t always the best person to take on a task in their area of specialization (because not all specialists are highly skilled at their specialty), they usually are.&lt;/p&gt;

&lt;p&gt;If you tell me that not all dogs have four legs, and I say that dogs usually have four legs, I’m not misunderstanding basic logic — I’m differentiating between the words “all” and “usually”. Not understanding &lt;em&gt;that&lt;/em&gt; distinction is a sign of not understanding basic logic.&lt;/p&gt;

&lt;p&gt;But back to the matter at hand.&lt;/p&gt;

&lt;p&gt;The actual substantive debate with this Well-Respected UX Personality (whom I will simply refer to from here on out as “my opponent”) was about the value —or lack thereof — of user experience design specialists. There are some subtleties to the debate that are specific to UX — but most of what I have to say here applies to any line of work — at least in the realm of software development.&lt;/p&gt;

&lt;p&gt;The platonic ideal of a development team is one in which every member is great at everything that could possibly need to be done. On that team, no matter what comes up, there will always be a resource available to handle it.&lt;/p&gt;

&lt;p&gt;Not even my opponent believed this to be realistic, but his idea of a realistic alternative was much closer to the platonic ideal than mine was.&lt;/p&gt;

&lt;h2 id=&quot;flying-fire-breathing-immortal-solid-gold-unicorns&quot;&gt;Flying, fire-breathing, immortal, solid gold unicorns&lt;/h2&gt;

&lt;p&gt;This next bit is specifically about User Experience design specialization, but will likely resonate with people in other fields.&lt;/p&gt;

&lt;p&gt;My opponent’s strident belief is that user experience design responsibilities should be distributed among all members of a development team. I think this is incredibly unrealistic for reasons &lt;a href=&quot;https://medium.com/uie-brain-sparks/help-is-there-a-cardiothoracic-surgeon-in-the-room-a94b7772af7d&quot;&gt;his own words&lt;/a&gt; should make clear (emphasis mine):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Our research showed there are core skills [in UX]: &lt;strong&gt;interaction design&lt;/strong&gt;, &lt;strong&gt;information architecture&lt;/strong&gt;, &lt;strong&gt;user research&lt;/strong&gt;, &lt;strong&gt;visual design&lt;/strong&gt;, &lt;strong&gt;information design&lt;/strong&gt;, &lt;strong&gt;fast iteration management&lt;/strong&gt;, &lt;strong&gt;copywriting&lt;/strong&gt;, and &lt;strong&gt;editing&lt;/strong&gt;. There are also what we call enterprise skills, some of which are: &lt;strong&gt;analytics&lt;/strong&gt;, &lt;strong&gt;development methods&lt;/strong&gt;, &lt;strong&gt;design-to-development documentation&lt;/strong&gt;, &lt;strong&gt;ethnography&lt;/strong&gt;, &lt;strong&gt;social networks&lt;/strong&gt;, &lt;strong&gt;marketing&lt;/strong&gt;, &lt;strong&gt;technology&lt;/strong&gt;, &lt;strong&gt;business knowledge&lt;/strong&gt;, and &lt;strong&gt;domain knowledge&lt;/strong&gt;. […]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the best teams, every team member has a solid foundation in all of these skills.&lt;/p&gt;

&lt;p&gt;In the tech world, people who are good at design and development are often referred to as “unicorns” — because they’re exceptionally rare, to the point of possibly being mythical. This line of thinking isn’t advocating for “unicorns”, it’s advocating for flying, fire-breathing, immortal, solid gold unicorns.&lt;/p&gt;

&lt;p&gt;Not gold, but totally immortal, flying unicorn&lt;/p&gt;

&lt;p&gt;I absolutely believe that the principles of usability and user-centrism should be understood and shared by all members of a development team — as should other key development principles such as security, performance, accessibility, and maintainability. But there’s a difference between applying principles to your work and performing actual tasks.&lt;/p&gt;

&lt;p&gt;A security minded developer isn’t usually the person configuring your corporate firewall. That’s the difference between principles and tasks. A developer well-versed in the principles of user experience design isn’t likely going to be the person doing hours of contextual inquiry, persona development, and journey mapping. User experience design isn’t just an aspect of development — it’s a craft involving highly specialized skills and tasks. These activities are so radically different from other development activities that the context switching involved makes it simply impossible for someone to do both of these things very well on a day to day basis in a real world scenario.&lt;/p&gt;

&lt;p&gt;So let me say this without any ambiguity: &lt;strong&gt;If you’re building a team to make great products, hire a user experience specialist or two&lt;/strong&gt;. And if you are a user experience specialist, be proud of your work and keep kicking ass. You are valuable — even if one of the most respected minds in UX doesn’t seem to think so.&lt;/p&gt;

&lt;h2 id=&quot;skills-matter-therefore-specialization-matters&quot;&gt;Skills matter. Therefore, specialization matters.&lt;/h2&gt;

&lt;p&gt;Back to specialization in general.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Roles don’t matter, skills do.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is another assertion from my opponent that I fully agree with, while disagreeing with his conclusion. This was presented as an argument against specialization. But it only holds up against the most cynical definition of specialization. If I’ve never written any code in my life except for five lines of JavaScript, I could call myself a JavaScript specialist — after all, that’s where 100% of my coding experience lies, right?&lt;/p&gt;

&lt;p&gt;That’s the cynical view of “specialization” — which is pretty irrelevant in any real world scenario where people’s skills are actually vetted before they are hired.&lt;/p&gt;

&lt;p&gt;That’s not how I define a specialist. That’s not even how the dictionary defines a specialist. In my world, a specialist is someone who focuses on a particular type of work because they are passionate and highly skilled in that field.&lt;/p&gt;

&lt;p&gt;Perhaps to avoid any ambiguity between the dictionary definition of “specialist” and the more limited, cynical definition, I should use the word “expert”. But here’s the thing… Every piece of advice I’ve ever encountered about how to become an expert at something says one thing : Follow the pursuit obsessively to the exclusion of all else.&lt;/p&gt;

&lt;p&gt;Specialize.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Only one who devotes himself to a cause with his whole strength and soul can be a true master. For this reason mastery demands all of a person. — Albert Einstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why aren’t baseball or football players interchangeable within a team? Why can’t a shortstop step in and pitch if the pitcher gets injured? The answer is so obvious, it’s feels almost silly to answer: The different skills required for the different positions on a professional sports team require so much specific training that it’s simply impossible to develop expert-level skills for multiple positions simultaneously. There just aren’t enough hours in the day.&lt;/p&gt;

&lt;p&gt;Perhaps tech roles are perceived differently because, to an outsider, most roles involve pecking away a computer, so they don’t &lt;em&gt;look&lt;/em&gt; radically different. But they are.&lt;/p&gt;

&lt;h2 id=&quot;what-full-stack-development-really-means&quot;&gt;What full-stack development really means&lt;/h2&gt;

&lt;p&gt;You may ask, “What about the concept of the ‘&lt;a href=&quot;http://www.quora.com/What-does-the-term-full-stack-programmer-mean&quot;&gt;full-stack developer&lt;/a&gt;’? Surely that trend is no myth!”&lt;/p&gt;

&lt;p&gt;No, full stack developers are very real, but there’s an interesting thing you’ll notice about full-stack developers, if you dig a little deeper.&lt;/p&gt;

&lt;p&gt;Full stack developers almost invariably gravitate to (or create) tools that make the stuff they’re &lt;em&gt;not so good at&lt;/em&gt; work like the stuff they &lt;em&gt;are good at&lt;/em&gt;. This generally breaks down into “front end” vs. “back end” development, and is the root cause of the explosion of web development “frameworks” of the past five years or so.&lt;/p&gt;

&lt;p&gt;Ruby on Rails (arguably the first highly successful full-stack web platform) uses technology like HAML and CoffeeScript to make front-end development feel more like backend development. And, coming from the other direction, every damn thing in the world can now be done with JavaScript (originally a purely front-end development language).&lt;/p&gt;

&lt;p&gt;Full-stack developers are very good at finding ways to make one skill solve problems which normally require multiple skills. This is in no way an insult. I’m not saying that they use hammers to drive screws. I’m saying they actually invent hammers which &lt;em&gt;really can&lt;/em&gt; drive screws. Adapting &lt;em&gt;problems&lt;/em&gt; to known &lt;em&gt;solutions&lt;/em&gt; is a brilliant way to reduce complexity. In fact, it’s the whole idea behind the fundamental computer science principle of abstraction. And it’s human nature. We map the unfamiliar to the familiar.&lt;/p&gt;

&lt;p&gt;Back to UX design for a second. You’re never going to abstract user studies or wireframing excercises into JavaScript or Ruby. There’s no pre-processor or cross-compiler for that. The actual activities of UX design and coding are completely different. There’s a reason “full-stack development” also doesn’t include sales, marketing, or accounting — aren’t all those things also needed to create a successful product?&lt;/p&gt;

&lt;h2 id=&quot;and-what-about-happiness&quot;&gt;…and what about happiness?&lt;/h2&gt;

&lt;p&gt;Let’s assume for a moment that a team where everyone is good at everything is the ideal set-up for efficiently “shipping product”. If such a team could exist, I would even accept this as obvious. But is being interchangeable cogs in product-shipping machines the future we want for ourselves and our colleagues?&lt;/p&gt;

&lt;p&gt;The most interesting people in technology (or in anything, really) are people who are truly great at one thing, or &lt;em&gt;possibly&lt;/em&gt; two. These people are interesting because they are following their passion. &lt;em&gt;Everyone&lt;/em&gt; is most interesting when they follow their passion. &lt;em&gt;You&lt;/em&gt; are most interesting when following &lt;em&gt;your&lt;/em&gt; passion. And you are most &lt;em&gt;happy&lt;/em&gt; when following your passion. &lt;em&gt;Your team members&lt;/em&gt; are most happy when following their passion. And your team members are most &lt;em&gt;productive&lt;/em&gt; when they’re &lt;em&gt;happy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Shipping product isn’t the ultimate goal in life, people. Shipping product makes money. Having money gives you the freedom to do what you love. If you’re not doing what you love, is it worth being part of a product-shipping machine?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We don’t make movies to make money, we make money to make more movies. — Walt Disney&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Job titles, roles, and specializations don’t matter for shipping product. But they do matter for acknowledging the unique skills and passions of actual human beings, and for making them feel important, accountable, and appreciated. Maybe wanting that type of appreciation is foolish, but then feel free to call me a fool.&lt;/p&gt;

&lt;h2 id=&quot;so-about-that-team-structure&quot;&gt;So, about that team structure&lt;/h2&gt;

&lt;p&gt;OK, enough with the happiness talk. You still want to know how to build an effective (and happy) development team in the real world. Well, like with many things, the realistic answer is not the clever, pithy one. It’s the boring, relatively obvious one.&lt;/p&gt;

&lt;p&gt;You don’t need everyone on your team to be great at everything. You just need the right skills in the right places so you’re not screwed if someone gets hit by a bus. Try to have at least two people who are experts in each core skill needed to build your product (these people will likely be specialists). Then encourage and facilitate cross-pollination of a base level of fundamental cross-discipline knowledge between everyone. Not everyone will have every skill needed for making the product, but everyone must be able to have conversations with folks in the other disciplines, and know enough about each discipline not to screw the other folks up.&lt;/p&gt;

&lt;p&gt;By the way, there actually &lt;em&gt;are&lt;/em&gt; people out there who know a lot about a lot of things. We might call these people “great generalists”. But, if you dig further, you’ll find they usually got that way by specializing in a number of things &lt;em&gt;sequentially&lt;/em&gt;. At any given moment in their career, they were a specialist in one thing, but carried knowledge from previous roles along with them. These people are incredibly valuable. By all means, hire them — but allow them to focus on whatever their current passion is. Don’t make them focus on what they did five to ten years ago.&lt;/p&gt;

&lt;p&gt;Hire great people, let them do what they love, and create an environment of frequent and frictionless collaboration. You will ship that product, and you will have created an environment where passion, happiness, and creativity thrives.&lt;/p&gt;</content><author><name></name></author><summary type="html">I was recently pilloried on Twitter by a Well-Respected UX Personality for asserting that there is a place on development teams for user experience specialists. In a particularly ugly bit of this exchange, I was even accused of not understanding basic logic, because while I agreed with him that specialists aren’t always the best person to take on a task in their area of specialization (because not all specialists are highly skilled at their specialty), they usually are. If you tell me that not all dogs have four legs, and I say that dogs usually have four legs, I’m not misunderstanding basic logic — I’m differentiating between the words “all” and “usually”. Not understanding that distinction is a sign of not understanding basic logic. But back to the matter at hand. The actual substantive debate with this Well-Respected UX Personality (whom I will simply refer to from here on out as “my opponent”) was about the value —or lack thereof — of user experience design specialists. There are some subtleties to the debate that are specific to UX — but most of what I have to say here applies to any line of work — at least in the realm of software development. The platonic ideal of a development team is one in which every member is great at everything that could possibly need to be done. On that team, no matter what comes up, there will always be a resource available to handle it. Not even my opponent believed this to be realistic, but his idea of a realistic alternative was much closer to the platonic ideal than mine was. Flying, fire-breathing, immortal, solid gold unicorns This next bit is specifically about User Experience design specialization, but will likely resonate with people in other fields. My opponent’s strident belief is that user experience design responsibilities should be distributed among all members of a development team. I think this is incredibly unrealistic for reasons his own words should make clear (emphasis mine): Our research showed there are core skills [in UX]: interaction design, information architecture, user research, visual design, information design, fast iteration management, copywriting, and editing. There are also what we call enterprise skills, some of which are: analytics, development methods, design-to-development documentation, ethnography, social networks, marketing, technology, business knowledge, and domain knowledge. […] On the best teams, every team member has a solid foundation in all of these skills. In the tech world, people who are good at design and development are often referred to as “unicorns” — because they’re exceptionally rare, to the point of possibly being mythical. This line of thinking isn’t advocating for “unicorns”, it’s advocating for flying, fire-breathing, immortal, solid gold unicorns. Not gold, but totally immortal, flying unicorn I absolutely believe that the principles of usability and user-centrism should be understood and shared by all members of a development team — as should other key development principles such as security, performance, accessibility, and maintainability. But there’s a difference between applying principles to your work and performing actual tasks. A security minded developer isn’t usually the person configuring your corporate firewall. That’s the difference between principles and tasks. A developer well-versed in the principles of user experience design isn’t likely going to be the person doing hours of contextual inquiry, persona development, and journey mapping. User experience design isn’t just an aspect of development — it’s a craft involving highly specialized skills and tasks. These activities are so radically different from other development activities that the context switching involved makes it simply impossible for someone to do both of these things very well on a day to day basis in a real world scenario. So let me say this without any ambiguity: If you’re building a team to make great products, hire a user experience specialist or two. And if you are a user experience specialist, be proud of your work and keep kicking ass. You are valuable — even if one of the most respected minds in UX doesn’t seem to think so. Skills matter. Therefore, specialization matters. Back to specialization in general. “Roles don’t matter, skills do.” This is another assertion from my opponent that I fully agree with, while disagreeing with his conclusion. This was presented as an argument against specialization. But it only holds up against the most cynical definition of specialization. If I’ve never written any code in my life except for five lines of JavaScript, I could call myself a JavaScript specialist — after all, that’s where 100% of my coding experience lies, right? That’s the cynical view of “specialization” — which is pretty irrelevant in any real world scenario where people’s skills are actually vetted before they are hired. That’s not how I define a specialist. That’s not even how the dictionary defines a specialist. In my world, a specialist is someone who focuses on a particular type of work because they are passionate and highly skilled in that field. Perhaps to avoid any ambiguity between the dictionary definition of “specialist” and the more limited, cynical definition, I should use the word “expert”. But here’s the thing… Every piece of advice I’ve ever encountered about how to become an expert at something says one thing : Follow the pursuit obsessively to the exclusion of all else. Specialize. Only one who devotes himself to a cause with his whole strength and soul can be a true master. For this reason mastery demands all of a person. — Albert Einstein Why aren’t baseball or football players interchangeable within a team? Why can’t a shortstop step in and pitch if the pitcher gets injured? The answer is so obvious, it’s feels almost silly to answer: The different skills required for the different positions on a professional sports team require so much specific training that it’s simply impossible to develop expert-level skills for multiple positions simultaneously. There just aren’t enough hours in the day. Perhaps tech roles are perceived differently because, to an outsider, most roles involve pecking away a computer, so they don’t look radically different. But they are. What full-stack development really means You may ask, “What about the concept of the ‘full-stack developer’? Surely that trend is no myth!” No, full stack developers are very real, but there’s an interesting thing you’ll notice about full-stack developers, if you dig a little deeper. Full stack developers almost invariably gravitate to (or create) tools that make the stuff they’re not so good at work like the stuff they are good at. This generally breaks down into “front end” vs. “back end” development, and is the root cause of the explosion of web development “frameworks” of the past five years or so. Ruby on Rails (arguably the first highly successful full-stack web platform) uses technology like HAML and CoffeeScript to make front-end development feel more like backend development. And, coming from the other direction, every damn thing in the world can now be done with JavaScript (originally a purely front-end development language). Full-stack developers are very good at finding ways to make one skill solve problems which normally require multiple skills. This is in no way an insult. I’m not saying that they use hammers to drive screws. I’m saying they actually invent hammers which really can drive screws. Adapting problems to known solutions is a brilliant way to reduce complexity. In fact, it’s the whole idea behind the fundamental computer science principle of abstraction. And it’s human nature. We map the unfamiliar to the familiar. Back to UX design for a second. You’re never going to abstract user studies or wireframing excercises into JavaScript or Ruby. There’s no pre-processor or cross-compiler for that. The actual activities of UX design and coding are completely different. There’s a reason “full-stack development” also doesn’t include sales, marketing, or accounting — aren’t all those things also needed to create a successful product? …and what about happiness? Let’s assume for a moment that a team where everyone is good at everything is the ideal set-up for efficiently “shipping product”. If such a team could exist, I would even accept this as obvious. But is being interchangeable cogs in product-shipping machines the future we want for ourselves and our colleagues? The most interesting people in technology (or in anything, really) are people who are truly great at one thing, or possibly two. These people are interesting because they are following their passion. Everyone is most interesting when they follow their passion. You are most interesting when following your passion. And you are most happy when following your passion. Your team members are most happy when following their passion. And your team members are most productive when they’re happy. Shipping product isn’t the ultimate goal in life, people. Shipping product makes money. Having money gives you the freedom to do what you love. If you’re not doing what you love, is it worth being part of a product-shipping machine? We don’t make movies to make money, we make money to make more movies. — Walt Disney Job titles, roles, and specializations don’t matter for shipping product. But they do matter for acknowledging the unique skills and passions of actual human beings, and for making them feel important, accountable, and appreciated. Maybe wanting that type of appreciation is foolish, but then feel free to call me a fool. So, about that team structure OK, enough with the happiness talk. You still want to know how to build an effective (and happy) development team in the real world. Well, like with many things, the realistic answer is not the clever, pithy one. It’s the boring, relatively obvious one. You don’t need everyone on your team to be great at everything. You just need the right skills in the right places so you’re not screwed if someone gets hit by a bus. Try to have at least two people who are experts in each core skill needed to build your product (these people will likely be specialists). Then encourage and facilitate cross-pollination of a base level of fundamental cross-discipline knowledge between everyone. Not everyone will have every skill needed for making the product, but everyone must be able to have conversations with folks in the other disciplines, and know enough about each discipline not to screw the other folks up. By the way, there actually are people out there who know a lot about a lot of things. We might call these people “great generalists”. But, if you dig further, you’ll find they usually got that way by specializing in a number of things sequentially. At any given moment in their career, they were a specialist in one thing, but carried knowledge from previous roles along with them. These people are incredibly valuable. By all means, hire them — but allow them to focus on whatever their current passion is. Don’t make them focus on what they did five to ten years ago. Hire great people, let them do what they love, and create an environment of frequent and frictionless collaboration. You will ship that product, and you will have created an environment where passion, happiness, and creativity thrives.</summary></entry></feed>